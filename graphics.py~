import sys, pygame

class Image(object):
    def __init__(self, surface=None, screen=None):
        self.surface = surface
        self.screen = screen
        self.pos = (0,0)
        if surface is not None:
            self.size = surface.get_size()
        else:
            self.size = (0,0)
        self.rect  = pygame.Rect(self.pos, self.size)
        self.width, self.height = self.size
        
    def loadSurface(self, surface):
        self.surface = surface
        self.rect = surface.get_rect()
        self.size = surface.get_size()
        self.width, self.height = self.size

    def drawSurface(self, surface, pos):
        self.screen.blit(surface, pos)

    def draw(self, pos):
        self.drawSurface(self.surface, pos)
        self.pos = x,y = pos
        self.rect.move_ip(x,y)
        
    def erase(self):
        self.screen.blit(BACKGROUND.subsurface(self.rect),self.rect)
        self.rect = pygame.Rect(0,0,0,0)
        self.pos = 0,0
        self.size = 0,0
        self.width, self.height = 0,0       

    def scale(self, ratio):
        self.surface = scale(self.surface, ratio)

    def within(self, pos):
        return self.rect.collidepoint(pos)


class CardImage(Image):
    def __init__(self, fileName, bigFileName=None, screen=None):
        self.fileName=fileName
        self.bigFileName = bigFileName
        Image.__init__(self, pygame.image.load(fileName).convert())
        if bigFileName != None:
            self.bigSurface = pygame.image.load(bigFileName).convert()
  
    def drawZoomed(self, pos):
        self.drawSurface(self.bigSurface, pos)

class DomainImage(CardImage):
	def __init__(self, fileName, bigFileName=None):
		CardPic.__init__(self, fileName, bigFileName)
		self.surface = pygame.transform.rotate(self.surface, 270)

class ZoomWindow(Image):
    
    def show(self, cardImage):
        self.screen.blit(BACKGROUND.subsurface(self.rect),self.rect)
        self.surface = copy(cardpic.surface)
        self.rect = self.surface.get_rect()
        self.width, self.height = self.rect[2], self.rect[3]
        xpos = int(round(WIDTH - self.width))
        ypos = int(round(HEIGHT - self.height) /2.)
        self.pos = xpos, ypos
        self.rect[0], self.rect[1] = self.pos
        self.screen.blit(self.surface, self.pos)
    
    def clear(self):
        self.screen.blit(BACKGROUND.subsurface(self.rect),self.rect)
    
    


